@inject HttpClient Http
@inject ILocalStorageService localStorage

@if (CreateInvestment)
{
    <CreationModal Title="Investment" @bind-CreateEntry="CreateInvestment">
        <EditForm Model="@Investment" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group mb-3">
                <label class="form-label" for="description">Description</label>
                <InputText class="form-control" id="description" name="description" @bind-Value="Investment.Description" />
                <ValidationMessage For="@(() => Investment.Description)" />
            </div>
            <div class="form-group mb-3">
                <input type="submit" class="btn btn-dark" value="Create" />
            </div>
        </EditForm>
    </CreationModal>
}

<h1>Investments</h1>
<div class="button-div" style="text-align: right">
    <button
        @onclick="ToggleCreateInvestment"
        type="button"
        class="btn btn-success button"
    >
        <i class="oi oi-plus"></i>
    </button>
</div>
<table class="table table-hover">
    <thead class="thead-dark">
        <th>ID</th>
        <th>Description</th>
        <th>Action</th>
    </thead>
    <tbody>
        @if (Investments != null)
        {
            @foreach (var inv in Investments)
            {
                <tr style="cursor: pointer;" onclick="@(() => SelectInvestment(inv))">
                    <td class="align-middle">@inv.Id</td>
                    <td class="align-middle">@inv.Description</td>
                    <td class="align-middle">
                        <button
                            @onclick="@(() => DeleteInvestment(inv))"
                            @onclick:stopPropagation
                            type="button"
                            class="btn btn-danger"
                        >
                            <i class="oi oi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    public InvestmentDTO Investment { get; set; } = new();

    public bool CreateInvestment { get; set; } = false;

    private IEnumerable<InvestmentDTO>? Investments { get; set; }

    [Parameter]
    public InvestmentDTO? SelectedInvestment { get; set; }

    [Parameter]
    public EventCallback<InvestmentDTO> SelectedInvestmentChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await FetchInvestments();
    }

    private async Task FetchInvestments()
    {
        var userId = await localStorage.GetItemAsStringAsync("userId");
        Investments = await Http.GetFromJsonAsync<IEnumerable<InvestmentDTO>>($"api/Investment?baseId={userId}");
    }

    private async Task SelectInvestment(InvestmentDTO selectedInvestment)
    {
        SelectedInvestment = selectedInvestment;
        await SelectedInvestmentChanged.InvokeAsync(SelectedInvestment);
    }

    private void ToggleCreateInvestment()
    {
        CreateInvestment = !CreateInvestment;
    }

    private async Task DeleteInvestment(InvestmentDTO investment)
    {
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Delete,
                RequestUri = new Uri($"{Http.BaseAddress}api/Investment"),
                Content = new StringContent(JsonSerializer.Serialize(investment), Encoding.UTF8, "application/json")
            };

        await Http.SendAsync(request);
        await FetchInvestments();
    }

    private async Task HandleValidSubmit()
    {
        var userId = await localStorage.GetItemAsStringAsync("userId");
        Investment.BaseId = Guid.Parse(userId);
        await Http.PostAsJsonAsync<InvestmentDTO>("api/Investment", Investment);
        await FetchInvestments();
        ToggleCreateInvestment();
    }
}
