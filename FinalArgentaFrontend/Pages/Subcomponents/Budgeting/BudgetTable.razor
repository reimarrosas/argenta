@inject HttpClient Http
@inject ILocalStorageService localStorage

@if (CreateBudget)
{
    <CreationModal Title="Create Budget" @bind-CreateEntry="CreateBudget">
        <EditForm Model="@Budget" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group mb-3">
                <label class="form-label" for="name">Name</label>
                <InputText class="form-control" id="name" name="Name" @bind-Value="Budget.Name" />
                <ValidationMessage For="@(() => Budget.Name)" />
            </div>
            <div class="form-group mb-3">
                <label class="form-label" for="total">Total</label>
                <InputNumber class="form-control" id="total" name="Total" @bind-Value="Budget.Total" />
                <ValidationMessage For="@(() => Budget.Total)" />
            </div>
            <div class="form-group mb-3">
                <label class="form-label" for="description">Description</label>
                <InputText class="form-control" id="description" name="Description" @bind-Value="Budget.Description" />
                <ValidationMessage For="@(() => Budget.Description)" />
            </div>
            <div class="form-group mb-3">
                <input type="submit" class="btn btn-dark" value="Create" />
            </div>
        </EditForm>
    </CreationModal>
}

            <h1 class="title">Budget</h1>
            <div class="button-div">
                <button
                    @onclick="ToggleCreateBudget"
                    type="button"
                    class="btn btn-success button"
                >
                    <i class="oi oi-plus"></i>
                </button>
            </div>
            <table class="table table-hover table-responsive budget-table">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Total</th>
                        <th>Description</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Budgets != null)
                    {
                        @foreach (var budget in Budgets)
                       {
                            <tr style="cursor: pointer;" @onclick="@(() => SelectBudget(budget))">
                                <td class="align-middle">@budget.Name</td>
                                <td class="align-middle">@($"{budget.Total:C}")</td>
                                <td class="align-middle">@(budget.Description ?? "N/A")</td>
                                <td class="align-middle">
                                    <button
                                        @onclick="@(() => DeleteBudget(budget))"
                                        @onclick:stopPropagation
                                        class="btn btn-danger"
                                    >
                                        <i class="oi oi-trash"></i>
                                    </button>
                                </td>
                            </tr>
                       }
                    }
                </tbody>
            </table>

@code {

    [CascadingParameter]
    public MainLayout Store { get; set; } = null!;

    public IEnumerable<BudgetDTO>? Budgets { get; set; }

    public bool CreateBudget { get; set; } = false;

    public BudgetDTO Budget { get; set; } = new();

    [Parameter]
    public BudgetDTO? SelectedBudget { get; set; }

    [Parameter]
    public EventCallback<BudgetDTO> SelectedBudgetChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Budgets = await FetchBudgets();
    }

    public void ToggleCreateBudget()
    {
        CreateBudget = !CreateBudget;
    }

    private async Task<IEnumerable<BudgetDTO>?> FetchBudgets()
    {
        var storedUserId = await localStorage.GetItemAsStringAsync("userId");
        return await Http.GetFromJsonAsync<IEnumerable<BudgetDTO>>($"api/Budget?baseId={storedUserId ?? ""}");
    }

    public async Task HandleValidSubmit()
    {
        Budget.BaseId = Store.UserId;
        await Http.PostAsJsonAsync<BudgetDTO>("api/Budget", Budget);
        Budget = new();
        ToggleCreateBudget();
        Budgets = await FetchBudgets();
    }

    private async Task SelectBudget(BudgetDTO budget)
    {
        SelectedBudget = budget;
        await SelectedBudgetChanged.InvokeAsync(SelectedBudget);
    }

    private async Task DeleteBudget(BudgetDTO budget)
    {
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Delete,
                RequestUri = new Uri($"{Http.BaseAddress}api/Budget"),
                Content = new StringContent(JsonSerializer.Serialize(budget), Encoding.UTF8, "application/json")
            };

        await Http.SendAsync(request);
        Budgets = await FetchBudgets();
        SelectedBudget = null;
        await SelectedBudgetChanged.InvokeAsync(SelectedBudget);
    }

}
