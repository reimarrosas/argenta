<PieChart @ref="pieChart" TItem="decimal" />

@code {
    [Parameter]
    public IEnumerable<BudgetItemDTO> BudgetItems { get; set; } = null!;

    [Parameter]
    public BudgetDTO SelectedBudget { get; set; } = null!;

    PieChart<decimal> pieChart = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    public async Task HandleRedraw()
    {
        await pieChart.Clear();

        await pieChart.AddLabelsDatasetsAndUpdate(GenerateLabels(), GetDataSet());
    }


    PieChartDataset<decimal> GetDataSet()
    {
        return new PieChartDataset<decimal>
            {
                Label = "Budget Percentages",
                Data = BudgetItems.Select(bi => bi.Percentage / 100.0M * SelectedBudget.Total).ToList(),
                BackgroundColor = GenerateColors(),
                BorderColor = BudgetItems.Select(bi => ChartColor.FromHtmlColorCode("#000000")).ToList()
            };
    }

    List<string> GenerateLabels()
    {
        return BudgetItems.Select(bi => bi.Name).ToList();
    }

    List<string> GenerateColors()
    {
        List<string> bgColors = new();
        foreach (var i in BudgetItems)
        {
            bgColors.Add(ChartColor.FromRgba((byte)new Random().Next(50, 206),
                                             (byte)new Random().Next(50, 206),
                                             (byte)new Random().Next(50, 206),
                                             GenerateAlpha()));
        }

        return bgColors;
    }

    float GenerateAlpha()
    {
        var r = new Random(DateTime.Now.Millisecond);
        return r.NextSingle();
    }
}
